server:
  port: 9004
#数据库连接
eureka:
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10
  client:
    registry-fetch-interval-seconds: 5
    # registerWithEureka是否向注册中心注册自己
    register-with-eureka: true
    # fetchRegistry是否需要去检索服务
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
  server:
    ## 主动失效检测间隔,配置成5秒
    eviction-interval-timer-in-ms: 5000
    enable-self-preservation: true
    ## 心跳阈值计算周期，如果开启自我保护模式，可以改一下这个配置
    renewal-threshold-update-interval-ms: 120000
    use-read-only-response-cache: false
atxa:
  switch: true
spring:
  jta:
    atomikos:
      datasource:
        beanName: xa
    enabled: true
  shardingsphere:
    datasource:
      names: master0,master1
      master0:
        resourceName: resource0
        uniqueResourceName: resource0
        type: com.boot.demo.config.db.MyAtomikosDataSourceBean
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/ms0?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&tinyInt1isBit=false
        username: root
        password: root
        minPoolSize: 10
        maxPoolSize: 100
      master1:
        resourceName: resource1
        uniqueResourceName: resource1
        type: com.boot.demo.config.db.MyAtomikosDataSourceBean
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/ms1?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&tinyInt1isBit=false
        username: root
        password: root
        minPoolSize: 10
        maxPoolSize: 100
    #分库分表
    sharding:
      default-data-source-name: master0
      #根据age分库
      default-database-strategy:
        inline:
          shardingColumn: user_id
          algorithm-expression: master$->{user_id % 2}
      #根据id分表
      tables:
        user:
          actualDataNodes: master$->{0..1}.user$->{0..1}
          databaseStrategy:
            inline:
              shardingColumn: user_id
              algorithm-expression: master$->{user_id % 2}
          tableStrategy:
            inline:
              shardingColumn: age
              algorithm-expression: user$->{age % 2}
              key-generate-strategy:
                column: user_id
                key-generator-name: snowflake
                worker.id: 123
          #根据spi配置手动订单号生产策略
          key-generator:
            column: user_id
            type: AtomicLong
            props:
              worker.id: 123
      #读写分离
      master-slave-rules:
        master0:
          master-data-source-name: master0
          slave-data-source-names: master0
        master1:
          master-data-source-name: master1
          slave-data-source-names: master1
    enabled: true
#  rabbitmq:
#    host:
#    port:
#    username:
#    password:
#    virtual-host:
#    exchange:
#      direct:
#        ucredit: direct.exchange.dev
#    queue:
#      notify: queue.notify.dev
#  redis:
#    host:
#    port:
#    password:
#    jedis:
#      pool:
##        max-wait: -1
#        max-idle: 8
#        min-idle: 0
#        max-active: 8
##    timeout: 0
# Seata 配置项，对应 SeataProperties 类
seata:
  enabled: false

thirdparty:
  rest-template:
    readTimeout: 30 #单位：秒
    connectTimeout: 30
    connectionRequestTimeout: 30
    maxTotal: 1000
    defaultMaxPerRoute: 1000
  remote:
    host: http://127.0.0.1:80
    url_test: http://127.0.0.1:80

#xxl:
#  job:
#    admin:
#      addresses:
#    executor:
#      appname: institution-ucredit
#      ip: 127.0.0.1
#      port: 9999
#      logpath: /tmp





